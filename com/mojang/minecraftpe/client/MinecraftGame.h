#pragma once

#include <string>
#include <memory>

class Minecraft;
class LevelSettings;
class AbstractScreen;
enum class GameType;
enum class HoloGameMode;
class HolographicPlatform;
class LocalPlayer;
class FocusImpact;
enum class Side;
class Vec3;
class Options;
namespace Realms {
	class World;
};
namespace Social {
	class GameConnectionInfo;
	class XboxLiveGameInfo;
};
class Player;
class VoiceSystem;
class Timer;
class DirectionId;
class Entity;
class TextureData;
class BuildActionIntention;
class VoiceCommand;
class Level;
class Dimension;
class InputMode;
class GuiData;
class ScreenChooser;
class Font;
namespace mce { 
	class UUID;
	class TextureGroup;
};
namespace ui {
	class GameEventNotification;
};
class ResourcePacksInfoData;
class HoloUIInputMode;
enum class ResourcePackResponse;

class MinecraftGame {
public:

	char filler1[720 - 4];
	/* size = 0x2D0 */

	// virtual
	virtual ~MinecraftGame();

	// non virtual
	MinecraftGame(int, char**);
	Options* getOptions();
	Minecraft* getServer();
	void* getHoloInput() const;
	void* getSkinRepository() const;
	void* getInput() const;
	void* getAutomationClient() const;
	void setEduMode(bool);
	void* getLevelLoader();
	void* getContentManager();
	void setLaunchedFromOculusApp(bool);
	void* getDpadScale();
	void* getScreenWidth() const;
	void* getScreenHeight() const;
	void* getLevelArchiver();
	void startLocalServer(std::string, std::string, LevelSettings);
	void updateScheduledScreen();
	void leaveGame(bool);
	void* getEventing() const;
	ScreenChooser* getScreenChooser() const;
	GuiData* getGuiData();
	void pushScreen(std::shared_ptr<AbstractScreen>, bool);
	void resetInput();
	void startFrame();
	void* getGuiScale(int);
	void setGameMode(GameType);
	void setHoloMode(HoloGameMode);
	void updateStats();
	void _reloadFancy(bool);
	void handleInvite();
	void initEventing();
	bool isKindleFire(int);
	void joinLiveGame(std::string const&);
	void onUserSignin();
	void refocusMouse();
	void releaseMouse();
	void setDpadScale(float);
	void setHoloInput(std::unique_ptr<HolographicPlatform>);
	void forEachScreen(std::function<bool (std::shared_ptr<AbstractScreen>&)>, bool);
	void* getScreenName();
	void onUserSignout();
	void reloadShaders(bool);
	void restartServer();
	void setupRenderer();
	void* useController();
	void* checkForPiracy();
	LocalPlayer* getLocalPlayer() const;
	void* getScreenNames();
	void handleTextChar(std::string const&, bool, FocusImpact);
	void joinRealmsGame(Realms::World const&, Social::GameConnectionInfo const&);
	void onPlayerLoaded(Player&);
	void setVoiceSystem(std::unique_ptr<VoiceSystem>);
	void updateGraphics(Timer const&);
	void* getToastManager();
	void handleDirection(DirectionId, float, float, FocusImpact);
	bool isServerVisible();
	void joinMultiplayer(Social::GameConnectionInfo, bool);
	void setCameraEntity(Entity*);
	void setDisableInput(bool);
	void setSuspendInput(bool);
	void setupClientGame(std::function<void (bool)>, bool);
	void tickBuildAction();
	void _reloadLanguages();
	void* getGuiScaleIndex(float);
	void sendLocalMessage(std::string const&, std::string const&);
	void teardownRenderer();
	void _updateScreenshot();
	void calculateGuiScale(int);
	void composeScreenshot(TextureData&, std::string const&, bool);
	void handleBuildAction(BuildActionIntention&);
	void handleVectorInput(short, float, float, float, FocusImpact);
	void onResourcesLoaded();
	void requestScreenshot(std::string const&);
	void schedulePopScreen(int);
	void addDownloadingPack(std::string, unsigned long long);
	void* getHoloviewerScale();
	void handleCommandEvent(VoiceCommand const&);
	void handleIdentityLost();
	void handleSimTimePause(bool);
	void handleSimTimeScale(float);
	void onDimensionChanged();
	void onMobEffectsChange();
	void setupCommandParser();
	void validateLocalLevel(std::string, std::string, LevelSettings);
	void* getMobEffectsLayout();
	void* getSituationalMusic();
	void handleCaretLocation(int, FocusImpact);
	void initOptionObservers();
	void joinRealmFromInvite(Social::XboxLiveGameInfo const&);
	void setServerToTransfer(std::string const&, short);
	void setupLevelRendering(Level*, Dimension*, Entity*);
	void* transformResolution(int*, int*);
	void updateFoliageColors();
	void _initMinecraftGame();
	void captureScreenAsImage(TextureData&);
	void forEachVisibleScreen(std::function<void (std::shared_ptr<AbstractScreen>&)>, bool);
	void* getUIMeasureStrategy();
	void handleDictationEvent();
	void handleIdentityGained();
	void handleLicenseChanged();
	void hasNetworkPrivileges(bool);
	void initializeTrialWorld(Player*);
	void onClientCreatedLevel(std::unique_ptr<Level>, std::unique_ptr<LocalPlayer>);
	void registerUpsellScreen();
	void waitAsyncSuspendWork();
	void createDynamicTextures();
	void* getUserAuthentication();
	void handleDropButtonPress();
	void handleMenuButtonPress(short, FocusImpact);
	void handlePointerLocation(short, short, FocusImpact);
	void handleToggleUIProfile();
	void onPrepChangeDimension();
	void processServerTransfer();
	void setCameraTargetEntity(Entity*);
	void startHoloviewerReveal();
	void updateDownloadingPack(std::string, unsigned long long, bool);
	void _toggleThirdPersonView();
	void destroyDynamicTextures();
	void* getHoloscreenHalfWidth();
	void handleInputModeChanged(InputMode);
	void handlePauseButtonPress();
	void handleShowUpsellScreen(bool);
	void runRegionalOfferChecks();
	void setHoloscreenHalfWidth(float);
	void getResourcePackProgress();
	void handleChatButtonRelease();
	void handleMenuButtonRelease(short, FocusImpact);
	void handlePaddleButtonPress(Side);
	void onGameEventNotification(ui::GameEventNotification);
	void setHoloviewerPlayerMode(bool, bool);
	void setKeyboardForcedHeight(float);
	void _adjustGazeCursorByMouse(float, float);
	ResourcePacksInfoData* getResourcePacksInfoData();
	void handleDropAllButtonPress();
	void setResourcePacksInfoData(ResourcePacksInfoData const&);
	void handleCraftingButtonPress();
	void handleDismountButtonPress();
	void handleInteractButtonPress();
	void handlePaddleButtonRelease(Side);
	void handleReloadUIDefinitions();
	void handleUIScalingRuleChange();
	void setProcessRegistrationKey(std::string const&);
	void startExternalNetworkWorld(Social::GameConnectionInfo, std::string const&);
	void* getActiveDirectoryIdentity();
	void handleConsoleButtonRelease();
	void handleHoloInputModeChanged(HoloUIInputMode);
	void handleInventoryButtonPress();
	void repopulatePlayScreenWorlds();
	void _registerOnInitUriListeners();
	void clearDictationDataAvailable();
	void handleControllerTypeChanged();
	void handleDebugToggleLSRCommand();
	void handleMobEffectsButtonPress();
	void handleSetGazeControllerMode();
	void handleSlotSelectButtonPress(int);
	void handleMemoryStatsButtonPress();
	void handleNextAVCStatButtonPress();
	void handleRenderDebugButtonPress();
	void handleStickCursorButtonPress();
	void _processNewGazeHoloScreenData();
	void _unregisterOnInitUriListeners();
	void currentScreenShouldStealMouse();
	void handleBiomeDisplayButtonPress();
	void handleDropAllItemsButtonPress();
	void handleToggleNoClipButtonPress();
	void handleBuildActionButtonRelease();
	void handleBuildOrAttackButtonPress();
	void handleInventoryMoveButtonPress(int);
	void handleNextAVCStatButtonRelease();
	void handleResourcePackConfirmation(ResourcePackResponse, bool);
	void handleStickCursorButtonRelease();
	void handleSuspendResumeButtonPress();
	void handleToggleTexelAAButtonPress();
	void _deserializeGlobalResourcePacks();
	void* _getGuiScaleIndexForLargeScreen(int, int);
	void* _getGuiScaleIndexForSmallScreen(int, int);
	void handleAttackActionButtonRelease();
	void handleDebugToggleAnchorsCommand();
	void handlePointerPressedButtonPress();
	void handleToggleFlyFlastButtonPress();
	void handleToggleGameModeButtonPress();
	void setInhibitInputDueToTextBoxMode();
	void handleBuildOrInteractButtonPress();
	void handleDestoryOrAttackButtonPress();
	void handlePickDebugObjectButtonPress();
	void handleTimeStepForwardButtonPress();
	void handleToastInteractButtonRelease();
	void displayActiveDirectoryLoginDialog();
	void handleLowMemoryWarningButtonPress();
	void handlePointerPressedButtonRelease();
	void handleSetSpawnPositionButtonPress();
	void resetInhibitInputDueToTextBoxMode();
	void setDeferRenderingUntilChunksReady();
	void setupStartMenuScreenCommandParser();
	void _recenterGazeActivationOriginPoint();
	void* getResourcePackDownloadingProgress(std::string&);
	void handleDestroyOrInteractButtonPress();
	void handleDebugWorkerThreadsButtonPress();
	void handleToggleLivingroomButtonRelease();
	void handleToggleShowChunkMapButtonPress();
	void _loadLastGlobalResourcePacksFromFile();
	void handleToggleSimulateTouchButtonPress();
	void handlePointerLocationWithGazeOverride(short, short);
	void handleToggleDayCycleActiveButtonPress();
	void initFoliageAndBlockTextureTessellator();
	void handleCreativeBlockSelectButtonRelease();
	void handleToggleAdvancedCullingButtonPress();
	void handleToggleThirdPersonViewButtonPress();
	void handleDecreaseRenderDistanceButtonPress();
	void handleIncreaseRenderDistanceButtonPress();
	void handleToggleChatTextToSpeechButtonPress();
	void handleTogglePlayerUpdateMobsButtonPress();
	void* _computeScreenCoordsFromScreenNormCoords(float, float, short&, short&);
	void handleToggleFrameTimerDisplayButtonPress();
	void handleDecrementMaxCullingStepsButtonPress();
	void handleIncrementMaxCullingStepsButtonPress();
	bool _shouldUseLastPointerLocationOnFocusChange();
	void currentInputModeIsGamePadOrMotionController();
	void handleToggleEnableNewScreensDebugButtonPress();
	void returnJoinLobbyResultBasedOnPendingRealmsInvites();
	void play(std::string const&, Vec3 const&, float, float);
	void playUI(std::string const&, float, float);
	void ResetBai(int);
	void endFrame();
	bool isInGame();
	void* getRealms();
	void* getScreen();
	void grabMouse();
	void tickInput();
	void* getUIWidth() const;
	void* getRuneFont() const;
	mce::TextureGroup* getTextures() const;
	void* getUIHeight() const;
	bool allowPicking() const;
	void* getUIDefRepo() const;
	bool isNotVLRMode() const;
	bool isInBedScreen() const;
	bool isShowingMenu() const;
	void* getMultiplayer() const;
	void* getSoundEngine() const;
	void* getUserManager() const;
	void* getVoiceSystem() const;
	bool isUserSignedIn() const;
	void* getCameraEntity() const;
	void* getGameRenderer() const;
	void* getMouseGrabbed() const;
	void* getSettingsPath() const;
	bool isIPv4Supported() const;
	bool isIPv6Supported() const;
	void* getDictationText() const;
	void* getGeometryGroup() const;
	void* getLevelRenderer() const;
	void* getClientRandomId() const;
	void* getExternalServer() const;
	void* getParticleEngine() const;
	bool isSRPlacementMode() const;
	void* getDownloadMonitor() const;
	void* getForceMonoscopic() const;
	void* getOfferRepository() const;
	bool isHoloCursorNeeded() const;
	void* getCurrentInputMode() const;
	bool hasPendingScreenPop() const;
	void* isRealityFullVRMode() const;
	bool isScreenReplaceable() const;
	void* getHolosceneRenderer() const;
	void* getSkinGeometryGroup() const;
	void* getCameraTargetEntity() const;
	void* getCurrentLevelSummary() const;
	ResourcePackManager* getResourcePackManager() const;
	bool isLaunchedFromOculusApp() const;
	void* getResourcePackRepository() const;
	void* newDictationDataAvailable() const;
	void* getOculusPlatformMessagePump() const;
	bool isHostingLocalDedicatedServer() const;
	void* getResourcePackDownloadManager(std::string const&) const;
	Font* getFont() const;
	void* getScreen() const;
	bool isEduMode() const;

	// static
	static std::string WORLD_PATH;
	static std::string SETTINGS_PATH;
	static void* GUI_SCALE_VALUES;
	static void* _hasInitedStatics;
	static int INTERACTION_FREQ_MS;
	static std::string RESOURCE_PACKS_SAVE_FILENAME;
};
